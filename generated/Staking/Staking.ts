// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class LogBond extends ethereum.Event {
  get params(): LogBond__Params {
    return new LogBond__Params(this);
  }
}

export class LogBond__Params {
  _event: LogBond;

  constructor(event: LogBond) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get poolId(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get nonce(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get slashedAtStart(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get time(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class LogSlash extends ethereum.Event {
  get params(): LogSlash__Params {
    return new LogSlash__Params(this);
  }
}

export class LogSlash__Params {
  _event: LogSlash;

  constructor(event: LogSlash) {
    this._event = event;
  }

  get poolId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get newSlashPts(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get time(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LogUnbondRequested extends ethereum.Event {
  get params(): LogUnbondRequested__Params {
    return new LogUnbondRequested__Params(this);
  }
}

export class LogUnbondRequested__Params {
  _event: LogUnbondRequested;

  constructor(event: LogUnbondRequested) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get bondId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get willUnlock(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get time(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class LogUnbonded extends ethereum.Event {
  get params(): LogUnbonded__Params {
    return new LogUnbonded__Params(this);
  }
}

export class LogUnbonded__Params {
  _event: LogUnbonded;

  constructor(event: LogUnbonded) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get bondId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get time(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Staking__bondsResult {
  value0: boolean;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: boolean, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class Staking__getWithdrawAmountInputBondStruct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get poolId(): Bytes {
    return this[1].toBytes();
  }

  get nonce(): BigInt {
    return this[2].toBigInt();
  }
}

export class Staking extends ethereum.SmartContract {
  static bind(address: Address): Staking {
    return new Staking("Staking", address);
  }

  bonds(param0: Bytes): Staking__bondsResult {
    let result = super.call("bonds", "bonds(bytes32):(bool,uint64,uint64)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return new Staking__bondsResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_bonds(param0: Bytes): ethereum.CallResult<Staking__bondsResult> {
    let result = super.tryCall("bonds", "bonds(bytes32):(bool,uint64,uint64)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Staking__bondsResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  slashPoints(param0: Bytes): BigInt {
    let result = super.call("slashPoints", "slashPoints(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toBigInt();
  }

  try_slashPoints(param0: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "slashPoints",
      "slashPoints(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  slasherAddr(): Address {
    let result = super.call("slasherAddr", "slasherAddr():(address)", []);

    return result[0].toAddress();
  }

  try_slasherAddr(): ethereum.CallResult<Address> {
    let result = super.tryCall("slasherAddr", "slasherAddr():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenAddr(): Address {
    let result = super.call("tokenAddr", "tokenAddr():(address)", []);

    return result[0].toAddress();
  }

  try_tokenAddr(): ethereum.CallResult<Address> {
    let result = super.tryCall("tokenAddr", "tokenAddr():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getWithdrawAmount(
    owner: Address,
    bond: Staking__getWithdrawAmountInputBondStruct
  ): BigInt {
    let result = super.call(
      "getWithdrawAmount",
      "getWithdrawAmount(address,(uint256,bytes32,uint256)):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromTuple(bond)]
    );

    return result[0].toBigInt();
  }

  try_getWithdrawAmount(
    owner: Address,
    bond: Staking__getWithdrawAmountInputBondStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getWithdrawAmount",
      "getWithdrawAmount(address,(uint256,bytes32,uint256)):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromTuple(bond)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get slasher(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class SlashCall extends ethereum.Call {
  get inputs(): SlashCall__Inputs {
    return new SlashCall__Inputs(this);
  }

  get outputs(): SlashCall__Outputs {
    return new SlashCall__Outputs(this);
  }
}

export class SlashCall__Inputs {
  _call: SlashCall;

  constructor(call: SlashCall) {
    this._call = call;
  }

  get poolId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get pts(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SlashCall__Outputs {
  _call: SlashCall;

  constructor(call: SlashCall) {
    this._call = call;
  }
}

export class AddBondCall extends ethereum.Call {
  get inputs(): AddBondCall__Inputs {
    return new AddBondCall__Inputs(this);
  }

  get outputs(): AddBondCall__Outputs {
    return new AddBondCall__Outputs(this);
  }
}

export class AddBondCall__Inputs {
  _call: AddBondCall;

  constructor(call: AddBondCall) {
    this._call = call;
  }

  get bond(): AddBondCallBondStruct {
    return this._call.inputValues[0].value.toTuple() as AddBondCallBondStruct;
  }
}

export class AddBondCall__Outputs {
  _call: AddBondCall;

  constructor(call: AddBondCall) {
    this._call = call;
  }
}

export class AddBondCallBondStruct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get poolId(): Bytes {
    return this[1].toBytes();
  }

  get nonce(): BigInt {
    return this[2].toBigInt();
  }
}

export class RequestUnbondCall extends ethereum.Call {
  get inputs(): RequestUnbondCall__Inputs {
    return new RequestUnbondCall__Inputs(this);
  }

  get outputs(): RequestUnbondCall__Outputs {
    return new RequestUnbondCall__Outputs(this);
  }
}

export class RequestUnbondCall__Inputs {
  _call: RequestUnbondCall;

  constructor(call: RequestUnbondCall) {
    this._call = call;
  }

  get bond(): RequestUnbondCallBondStruct {
    return this._call.inputValues[0].value.toTuple() as RequestUnbondCallBondStruct;
  }
}

export class RequestUnbondCall__Outputs {
  _call: RequestUnbondCall;

  constructor(call: RequestUnbondCall) {
    this._call = call;
  }
}

export class RequestUnbondCallBondStruct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get poolId(): Bytes {
    return this[1].toBytes();
  }

  get nonce(): BigInt {
    return this[2].toBigInt();
  }
}

export class UnbondCall extends ethereum.Call {
  get inputs(): UnbondCall__Inputs {
    return new UnbondCall__Inputs(this);
  }

  get outputs(): UnbondCall__Outputs {
    return new UnbondCall__Outputs(this);
  }
}

export class UnbondCall__Inputs {
  _call: UnbondCall;

  constructor(call: UnbondCall) {
    this._call = call;
  }

  get bond(): UnbondCallBondStruct {
    return this._call.inputValues[0].value.toTuple() as UnbondCallBondStruct;
  }
}

export class UnbondCall__Outputs {
  _call: UnbondCall;

  constructor(call: UnbondCall) {
    this._call = call;
  }
}

export class UnbondCallBondStruct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get poolId(): Bytes {
    return this[1].toBytes();
  }

  get nonce(): BigInt {
    return this[2].toBigInt();
  }
}

export class ReplaceBondCall extends ethereum.Call {
  get inputs(): ReplaceBondCall__Inputs {
    return new ReplaceBondCall__Inputs(this);
  }

  get outputs(): ReplaceBondCall__Outputs {
    return new ReplaceBondCall__Outputs(this);
  }
}

export class ReplaceBondCall__Inputs {
  _call: ReplaceBondCall;

  constructor(call: ReplaceBondCall) {
    this._call = call;
  }

  get bond(): ReplaceBondCallBondStruct {
    return this._call.inputValues[0].value.toTuple() as ReplaceBondCallBondStruct;
  }

  get newBond(): ReplaceBondCallNewBondStruct {
    return this._call.inputValues[1].value.toTuple() as ReplaceBondCallNewBondStruct;
  }
}

export class ReplaceBondCall__Outputs {
  _call: ReplaceBondCall;

  constructor(call: ReplaceBondCall) {
    this._call = call;
  }
}

export class ReplaceBondCallBondStruct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get poolId(): Bytes {
    return this[1].toBytes();
  }

  get nonce(): BigInt {
    return this[2].toBigInt();
  }
}

export class ReplaceBondCallNewBondStruct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get poolId(): Bytes {
    return this[1].toBytes();
  }

  get nonce(): BigInt {
    return this[2].toBigInt();
  }
}
